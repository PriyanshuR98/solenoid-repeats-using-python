import numpy as np
import matplotlib.pyplot as plt

def compute_theta_ratio(metric_functions, Nsp):
    theta_ratios = []
    max_z_score = -np.inf

    for theta in range(1, 6):  # Range of values for θ from 1 to 5
        N_theta = 0

        for a in range(1, 3):  # Loop over the five metric functions (a = 1, ..., 5)
            fa = metric_functions[a - 1]  # Retrieve the function fa

            for n in range(1, Nsp):
                zn_a = fa[n]

                if zn_a > theta:
                    N_theta += 1

                    if zn_a > max_z_score:
                        max_z_score = zn_a

        theta_ratio = (100 * N_theta) / (5 * (Nsp - 1))
        theta_ratios.append(theta_ratio)

    return theta_ratios, max_z_score


data2 = [(0.6778697850166593-0.009267994467739958j), (-0.5493476457832778-0.009267994467739958j), (-0.22984150364830838-0.009267994467739958j), (0.7657301224663579-0.009267994467739958j), (-0.3701879094386789-0.009267994467739958j), (1.0283250068591532-0.009267994467739958j), (5.180164356069392-0.009267994467739958j), (-0.36710632362866435-0.009267994467739958j), (-0.5715511286367501-0.009267994467739958j), (0.6862701303468205-0.009267994467739958j), (-0.902340983918531-0.009267994467739958j), (-0.6064553249884324-0.009267994467739958j), (-0.0820430428761885-0.009267994467739958j), (0.4919849310463037-0.009267994467739958j), (-0.5260004033394055-0.009267994467739958j), (-0.5436936734157947-0.009267994467739958j), (-0.08592131590447159-0.009267994467739958j), (-0.0912368321437848-0.009267994467739958j), (-0.2293627597622285-0.009267994467739958j), (-0.17774749969640147-0.009267994467739958j), (1.45017817719446-0.009267994467739958j), (0.2736473864415446-0.009267994467739958j), (-0.7794976150301945-0.009267994467739958j), (0.27343143836771916-0.009267994467739958j), (-0.3314732641755238-0.009267994467739958j), (-0.7149888160700939-0.009267994467739958j), (0.3673526318661066-0.009267994467739958j), (0.2956975506618459-0.009267994467739958j), (-0.26408015579500754-0.009267994467739958j), (-0.3447553356273896-0.009267994467739958j), (-0.6814208070834195-0.009267994467739958j), (-0.27394019272350023-0.009267994467739958j), (-0.49726016924703703-0.009267994467739958j), (-0.7064170672862438-0.009267994467739958j), (1.35175192864803-0.009267994467739958j), (0.05812852319239639-0.009267994467739958j), (-0.8638638163322114-0.009267994467739958j), (-0.5001074048976911-0.009267994467739958j), (-0.3834730505855415-0.009267994467739958j), (-0.8753112267117092-0.009267994467739958j), (-0.5294793393211794-0.009267994467739958j), (0.10252467860725076-0.009267994467739958j), (-0.5294793393211793-0.009267994467739958j), (-0.8753112267117092-0.009267994467739958j), (-0.3834730505855414-0.009267994467739958j), (-0.5001074048976912-0.009267994467739958j), (-0.8638638163322114-0.009267994467739958j), (0.05812852319239639-0.009267994467739958j), (1.35175192864803-0.009267994467739958j), (-0.7064170672862439-0.009267994467739958j), (-0.49726016924703714-0.009267994467739958j), (-0.27394019272350034-0.009267994467739958j), (-0.6814208070834193-0.009267994467739958j), (-0.3447553356273893-0.009267994467739958j), (-0.2640801557950079-0.009267994467739958j), (0.2956975506618459-0.009267994467739958j), (0.36735263186610634-0.009267994467739958j), (-0.7149888160700938-0.009267994467739958j), (-0.33147326417552403-0.009267994467739958j), (0.27343143836771916-0.009267994467739958j), (-0.7794976150301945-0.009267994467739958j), (0.2736473864415446-0.009267994467739958j), (1.45017817719446-0.009267994467739958j), (-0.17774749969640125-0.009267994467739958j), (-0.22936275976222814-0.009267994467739958j), (-0.09123683214378504-0.009267994467739958j), (-0.08592131590447112-0.009267994467739958j), (-0.5436936734157948-0.009267994467739958j), (-0.5260004033394053-0.009267994467739958j), (0.4919849310463037-0.009267994467739958j), (-0.08204304287618777-0.009267994467739958j), (-0.6064553249884324-0.009267994467739958j), (-0.902340983918531-0.009267994467739958j), (0.6862701303468207-0.009267994467739958j), (-0.57155112863675-0.009267994467739958j), (-0.36710632362866435-0.009267994467739958j), (5.180164356069393-0.009267994467739958j), (1.028325006859153-0.009267994467739958j), (-0.3701879094386791-0.009267994467739958j), (0.7657301224663576-0.009267994467739958j), (-0.22984150364830827-0.009267994467739958j), (-0.5493476457832778-0.009267994467739958j), (0.6778697850166578-0.009267994467739958j), (0.25422060117449435+0.7692435408224166j)]

converted_list1 = [np.real(x) for x in data2]

# print(converted_list)


data = [(0.4416117241987165+0.014863118610589528j), (-0.4694959212695123+0.014863118610589528j), (-0.40301131967727943+0.014863118610589528j), (-0.42942436053513283+0.014863118610589528j), (-0.3673887225468981+0.014863118610589528j), (-0.48534906964260044+0.014863118610589528j), (-0.23183906847024083+0.014863118610589528j), (-0.46071091891521787+0.014863118610589528j), (-0.427617981144953+0.014863118610589528j), (-0.01761430361433787+0.014863118610589528j), (0.07185815867088682+0.014863118610589528j), (0.10130403724441302+0.014863118610589528j), (-0.43244349600018767+0.014863118610589528j), (1.8509219591922423+0.014863118610589528j), (0.0058213305711098335+0.014863118610589528j), (-0.20611359515397848+0.014863118610589528j), (-0.32274394462579387+0.014863118610589528j), (-0.4069561912394088+0.014863118610589528j), (-0.46356087656594636+0.014863118610589528j), (-0.4507628433189846+0.014863118610589528j), (-0.19673474868635338+0.014863118610589528j), (-0.4203559479255385+0.014863118610589528j), (-0.2286929731058624+0.014863118610589528j), (-0.4424060433572678+0.014863118610589528j), (-0.352863827271606+0.014863118610589528j), (0.9490092120931419+0.014863118610589528j), (0.15172218190759523+0.014863118610589528j), (5.481814297268629+0.014863118610589528j), (0.5244196902733289+0.014863118610589528j), (0.6285001700250153+0.014863118610589528j), (-0.3642063191803737+0.014863118610589528j), (-0.42823420685436275+0.014863118610589528j), (-0.461877317412588+0.014863118610589528j), (-0.4432845746402149+0.014863118610589528j), (-0.37110560201586207+0.014863118610589528j), (0.13745998121583006+0.014863118610589528j), (-0.047789897278853105+0.014863118610589528j), (-0.03435960495696481+0.014863118610589528j), (0.8113446513889647+0.014863118610589528j), (-0.46893493954856424+0.014863118610589528j), (-0.4058652024611254+0.014863118610589528j), (-0.37276211983950097+0.014863118610589528j), (-0.40586520246112534+0.014863118610589528j), (-0.46893493954856424+0.014863118610589528j), (0.8113446513889649+0.014863118610589528j), (-0.03435960495696455+0.014863118610589528j), (-0.047789897278853175+0.014863118610589528j), (0.13745998121583006+0.014863118610589528j), (-0.37110560201586207+0.014863118610589528j), (-0.44328457464021487+0.014863118610589528j), (-0.46187731741258803+0.014863118610589528j), (-0.42823420685436275+0.014863118610589528j), (-0.36420631918037366+0.014863118610589528j), (0.6285001700250159+0.014863118610589528j), (0.5244196902733287+0.014863118610589528j), (5.481814297268629+0.014863118610589528j), (0.1517221819075951+0.014863118610589528j), (0.9490092120931412+0.014863118610589528j), (-0.3528638272716059+0.014863118610589528j), (-0.4424060433572678+0.014863118610589528j), (-0.22869297310586248+0.014863118610589528j), (-0.4203559479255384+0.014863118610589528j), (-0.19673474868635338+0.014863118610589528j), (-0.45076284331898453+0.014863118610589528j), (-0.46356087656594636+0.014863118610589528j), (-0.4069561912394088+0.014863118610589528j), (-0.32274394462579387+0.014863118610589528j), (-0.2061135951539786+0.014863118610589528j), (0.005821330571109898+0.014863118610589528j), (1.8509219591922423+0.014863118610589528j), (-0.43244349600018767+0.014863118610589528j), (0.10130403724441302+0.014863118610589528j), (0.07185815867088702+0.014863118610589528j), (-0.01761430361433813+0.014863118610589528j), (-0.42761798114495286+0.014863118610589528j), (-0.4607109189152179+0.014863118610589528j), (-0.2318390684702409+0.014863118610589528j), (-0.48534906964260044+0.014863118610589528j), (-0.3673887225468981+0.014863118610589528j), (-0.4294243605351329+0.014863118610589528j), (-0.40301131967727943+0.014863118610589528j), (-0.4694959212695124+0.014863118610589528j), (0.4416117241987165+0.014863118610589528j), (-1.4553250334282284-1.233638844678931j)]

converted_list2 = [np.real(x) for x in data]
print(len(data))

# print(converted_list)



# Example usage
metric_functions = [
    converted_list1,
    converted_list2         # Example values for metric function f1  
]
Nsp = 84  # Example value for the number of spectral amplitudes

theta_ratios, max_z_score = compute_theta_ratio(metric_functions, Nsp)
print("θ-ratios:", theta_ratios)
print("Maximum z-score (zmax):", max_z_score)

# Plotting
theta_values = range(1, 6)  # Values of θ

# Plot θ-ratios
plt.figure(figsize=(8, 4))
plt.subplot(1, 2, 1)
plt.bar(theta_values, theta_ratios)
plt.xlabel('θ')
plt.ylabel('θ-ratio')
plt.title('θ-ratios')

# Plot zmax
plt.subplot(1, 2, 2)
plt.bar(['zmax'], [max_z_score])
plt.ylabel('z-score')
plt.title('Maximum z-score (zmax)')

plt.tight_layout()
plt.show()
